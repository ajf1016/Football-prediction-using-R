ylab = "Blood Pressure Reduction",
col = c("lightblue", "lightgreen", "lightpink"))
plot(tukey_result)
boxplot(BP_Reduction ~ Drug, data = data,
main = "Blood Pressure Reduction by Drug",
xlab = "Drug",
ylab = "Blood Pressure Reduction",
col = c("lightblue", "lightgreen", "lightpink"))
head(data)
plot(tukey_result)
boxplot(BP_Reduction ~ Drug, data = data,
main = "Blood Pressure Reduction by Drug",
xlab = "Drug",
ylab = "Blood Pressure Reduction",
col = c("lightblue", "lightgreen", "lightpink"))
tukey_result
library(datasets)
library(ggplot2)
install.packages("factoextra")
library(factoextra)
df <- mtcars
df <- na.omit(df)
df <- scale(df)
library(datasets)
library(ggplot2)
library(factoextra)
df <- mtcars
df <- na.omit(df)
df <- scale(df)
png(file = "KmeansExample.png")
km <- kmeans(df,center = 4,nstart = 25)
fviz_cluter(km,data = df)
library(datasets)
library(ggplot2)
library(factoextra)
df <- mtcars
df <- na.omit(df)
df <- scale(df)
png(file = "KmeansExample.png")
km <- kmeans(df,center = 4,nstart = 25)
fviz_cluster(km,data = df)
dev.off()
library(class)
library(ggplot)
library(class)
library(ggplot2)
library(caret)
install.packages("caret")
data <- data.frame(
Age = c(45,50,39,40,29),
BMI = c(24.5,30.2,22.0,28.4,25.0),
BP = c(80,85,75,88,70),
Glucose = c(180,200,150,190,140),
Outcome = factor(c(1,1,0,1,0))
)
library(class)
library(ggplot2)
library(caret)
data <- data.frame(
Age = c(45,50,39,40,29),
BMI = c(24.5,30.2,22.0,28.4,25.0),
BP = c(80,85,75,88,70),
Glucose = c(180,200,150,190,140),
Outcome = factor(c(1,1,0,1,0))
)
print(data)
new_patient <- data.frame(Age = 37,BMI = 27.5,BP = 82,Glucose = 160)
print(data)
train_data <- data[,1:4]
train_lables <- data[,5]
knn_prediction <- knn(train_data,new_patient,train_lables,k = 3)
knn_prediction
knn_prediction <- knn(train_data,new_patient,train_lables,k = 3)
print(paste("Prediction for new patient : ",knn_prediction))
gpglot(data,aes(x = Age,y = Glucose,color = Outcome)) + geom_point(size = 4) + geom_point(data = new_patient,aes(x = Age,y = Glucose),color = "red",size = 5) + labs(title = "KNN Classification : Diabetic vs Non-Diabetic",x = "Age",y = "GLucose Level")
ggplot(data,aes(x = Age,y = Glucose,color = Outcome)) + geom_point(size = 4) + geom_point(data = new_patient,aes(x = Age,y = Glucose),color = "red",size = 5) + labs(title = "KNN Classification : Diabetic vs Non-Diabetic",x = "Age",y = "GLucose Level")
#load neceary libraries..
library(class)
library(ggplot2)
library(caret)
data <- data.frame(
Age = c(45,50,39,40,29),
BMI = c(24.5,30.2,22.0,28.4,25.0),
BP = c(80,85,75,88,70),
Glucose = c(180,200,150,190,140),
Outcome = factor(c(1,1,0,1,0))
)
new_patient <- data.frame(Age = 37,BMI = 27.5,BP = 82,Glucose = 160)
print(data)
train_data <- data[,1:4]
train_lables <- data[,5]
knn_prediction <- knn(train_data,new_patient,train_lables,k = 3)
print(paste("Prediction for new patient : ",knn_prediction))
ggplot(data,aes(x = Age,y = Glucose,color = Outcome)) + geom_point(size = 4) + geom_point(data = new_patient,aes(x = Age,y = Glucose),color = "red",size = 5) + labs(title = "KNN Classification : Diabetic vs Non-Diabetic",x = "Age",y = "Glucose Level")
library(datasets)
library(ggplot2)
library(factoextra)
df <- mtcars
df <- na.omit(df)
df <- scale(df)
png(file = "KmeansExample.png")
km <- kmeans(df,center = 4,nstart = 25)
fviz_cluster(km,data = df)
dev.off()
print(iris_data)
print(iris)
setwd("~/Documents/R/Score Prediction")
library(tidyverse)
library(caret)
# Example feature engineering
results <- read.csv("results.csv") %>%
mutate(match_date = as.Date(date),
home_advantage = if_else(neutral == FALSE, 1, 0)) %>%
group_by(home_team) %>%
mutate(recent_avg_home_score = rollapply(home_score, width = 5, FUN = mean, align = "right", fill = NA)) %>%
ungroup()
install.packages("zoo")
library(tidyverse)
library(caret)
library(zoo)
#  Example feature engineering with rollapply from the zoo package
results <- read.csv("results.csv") %>%
mutate(match_date = as.Date(date),
home_advantage = if_else(neutral == FALSE, 1, 0)) %>%
group_by(home_team) %>%
mutate(recent_avg_home_score = rollapply(home_score, width = 5, FUN = mean, align = "right", fill = NA)) %>%
ungroup()
# Define training and test sets
train <- results %>% filter(match_date < as.Date("2023-01-01"))
test <- results %>% filter(match_date >= as.Date("2023-01-01"))
# Example Poisson regression for home and away scores
home_model <- glm(home_score ~ recent_avg_home_score + home_advantage + tournament, data = train, family = poisson)
away_model <- glm(away_score ~ recent_avg_away_score + tournament + home_advantage, data = train, family = poisson)
# Load necessary libraries
library(tidyverse)
library(caret)
library(zoo)
# Load and prepare data
results <- read.csv("results.csv") %>%
mutate(match_date = as.Date(date),
home_advantage = if_else(neutral == FALSE, 1, 0)) %>%
# Calculate recent average scores for home and away teams
group_by(home_team) %>%
mutate(recent_avg_home_score = rollapply(home_score, width = 5, FUN = mean, align = "right", fill = NA)) %>%
ungroup() %>%
group_by(away_team) %>%
mutate(recent_avg_away_score = rollapply(away_score, width = 5, FUN = mean, align = "right", fill = NA)) %>%
ungroup()
# Split data into training and test sets based on date
train <- results %>% filter(match_date < as.Date("2023-01-01"))
test <- results %>% filter(match_date >= as.Date("2023-01-01"))
# Build Poisson regression models for predicting home and away scores
home_model <- glm(home_score ~ recent_avg_home_score + home_advantage + tournament,
data = train, family = poisson)
away_model <- glm(away_score ~ recent_avg_away_score + tournament + home_advantage,
data = train, family = poisson)
# Predict on the test set
test <- test %>%
mutate(predicted_home = predict(home_model, newdata = test, type = "response"),
predicted_away = predict(away_model, newdata = test, type = "response"))
# Load necessary libraries
library(tidyverse)
library(caret)
library(zoo)
# Load and prepare data
results <- read.csv("results.csv") %>%
mutate(match_date = as.Date(date),
home_advantage = if_else(neutral == FALSE, 1, 0)) %>%
# Calculate recent average scores for home and away teams
group_by(home_team) %>%
mutate(recent_avg_home_score = rollapply(home_score, width = 5, FUN = mean, align = "right", fill = NA)) %>%
ungroup() %>%
group_by(away_team) %>%
mutate(recent_avg_away_score = rollapply(away_score, width = 5, FUN = mean, align = "right", fill = NA)) %>%
ungroup()
# Split data into training and test sets based on date
train <- results %>% filter(match_date < as.Date("2023-01-01"))
test <- results %>% filter(match_date >= as.Date("2023-01-01"))
# Ensure 'tournament' levels in test set match those in the training set
test <- test %>%
mutate(tournament = factor(tournament, levels = levels(train$tournament)))
# Build Poisson regression models for predicting home and away scores
home_model <- glm(home_score ~ recent_avg_home_score + home_advantage + tournament,
data = train, family = poisson)
away_model <- glm(away_score ~ recent_avg_away_score + tournament + home_advantage,
data = train, family = poisson)
# Predict on the test set
test <- test %>%
mutate(predicted_home = predict(home_model, newdata = test, type = "response"),
predicted_away = predict(away_model, newdata = test, type = "response"))
# Display the first few rows of the test set with predictions
head(test %>% select(match_date, home_team, away_team, home_score, away_score,
predicted_home, predicted_away))
# Load necessary libraries
library(tidyverse)
library(caret)
library(zoo)
# Load and prepare data
results <- read.csv("results.csv") %>%
mutate(match_date = as.Date(date),
home_advantage = if_else(neutral == FALSE, 1, 0)) %>%
# Calculate recent average scores for home and away teams
group_by(home_team) %>%
mutate(recent_avg_home_score = rollapply(home_score, width = 5, FUN = mean, align = "right", fill = NA)) %>%
ungroup() %>%
group_by(away_team) %>%
mutate(recent_avg_away_score = rollapply(away_score, width = 5, FUN = mean, align = "right", fill = NA)) %>%
ungroup()
# Split data into training and test sets based on date
train <- results %>% filter(match_date < as.Date("2023-01-01"))
test <- results %>% filter(match_date >= as.Date("2023-01-01"))
# Ensure 'tournament' levels in test set match those in the training set
test <- test %>%
mutate(tournament = factor(tournament, levels = levels(train$tournament)))
# Build Poisson regression models for predicting home and away scores
home_model <- glm(home_score ~ recent_avg_home_score + home_advantage + tournament,
data = train, family = poisson)
away_model <- glm(away_score ~ recent_avg_away_score + tournament + home_advantage,
data = train, family = poisson)
# Save models to .rds files
saveRDS(home_model, file = "home_model.rds")
saveRDS(away_model, file = "away_model.rds")
# Save models to .rds files
saveRDS(home_model, file = "home_model.rds")
saveRDS(away_model, file = "away_model.rds")
# Function to predict match score for a given home and away team
predict_match_score <- function(home_team, away_team, tournament, recent_avg_home_score, recent_avg_away_score, neutral = FALSE) {
# Create a data frame for the input match with necessary features
match_data <- data.frame(
home_team = home_team,
away_team = away_team,
tournament = factor(tournament, levels = levels(home_model$data$tournament)), # Ensure correct factor levels
home_advantage = ifelse(neutral == FALSE, 1, 0),
recent_avg_home_score = recent_avg_home_score,
recent_avg_away_score = recent_avg_away_score
)
# Predict scores using the loaded models
predicted_home_score <- predict(home_model, newdata = match_data, type = "response")
predicted_away_score <- predict(away_model, newdata = match_data, type = "response")
# Return the predictions
list(home_score = predicted_home_score, away_score = predicted_away_score)
}
# Example inputs
home_team <- "Brazil"
away_team <- "Argentina"
tournament <- "FIFA World Cup"
recent_avg_home_score <- 1.8  # Example recent average goals for home team
recent_avg_away_score <- 1.5  # Example recent average goals for away team
neutral <- FALSE              # Whether the match is at a neutral venue
# Get predictions
predictions <- predict_match_score(home_team, away_team, tournament, recent_avg_home_score, recent_avg_away_score, neutral)
# Print predicted scores
cat("Predicted Score:\n")
cat(home_team, predictions$home_score, "-", predictions$away_score, away_team, "\n")
setwd("~/Documents/R/Score Prediction")
# Save models to .rds files
saveRDS(home_model, file = "home_model.rds")
saveRDS(away_model, file = "away_model.rds")
# Function to predict match score for a given home and away team
predict_match_score <- function(home_team, away_team, tournament, recent_avg_home_score, recent_avg_away_score, neutral = FALSE) {
# Create a data frame for the input match with necessary features
match_data <- data.frame(
home_team = home_team,
away_team = away_team,
tournament = factor(tournament, levels = levels(home_model$data$tournament)), # Ensure correct factor levels
home_advantage = ifelse(neutral == FALSE, 1, 0),
recent_avg_home_score = recent_avg_home_score,
recent_avg_away_score = recent_avg_away_score
)
# Predict scores using the loaded models
predicted_home_score <- predict(home_model, newdata = match_data, type = "response")
predicted_away_score <- predict(away_model, newdata = match_data, type = "response")
# Return the predictions
list(home_score = predicted_home_score, away_score = predicted_away_score)
}
# Example inputs
home_team <- "Brazil"
away_team <- "Argentina"
tournament <- "FIFA World Cup"
recent_avg_home_score <- 1.8  # Example recent average goals for home team
recent_avg_away_score <- 1.5  # Example recent average goals for away team
neutral <- FALSE              # Whether the match is at a neutral venue
# Get predictions
predictions <- predict_match_score(home_team, away_team, tournament, recent_avg_home_score, recent_avg_away_score, neutral)
# Print predicted scores
cat("Predicted Score:\n")
cat(home_team, predictions$home_score, "-", predictions$away_score, away_team, "\n")
# Save models to .rds files
saveRDS(home_model, file = "home_model.rds")
saveRDS(away_model, file = "away_model.rds")
# Function to predict match score for a given home and away team
predict_match_score <- function(home_team, away_team, tournament, recent_avg_home_score, recent_avg_away_score, neutral = FALSE) {
# Align factor levels of 'tournament' to match training data in the models
tournament <- factor(tournament, levels = levels(home_model$data$tournament))
# Create a data frame for the input match with necessary features
match_data <- data.frame(
home_team = home_team,
away_team = away_team,
tournament = tournament,
home_advantage = ifelse(neutral == FALSE, 1, 0),
recent_avg_home_score = recent_avg_home_score,
recent_avg_away_score = recent_avg_away_score
)
# Predict scores using the loaded models
predicted_home_score <- predict(home_model, newdata = match_data, type = "response")
predicted_away_score <- predict(away_model, newdata = match_data, type = "response")
# Return the predictions
list(home_score = predicted_home_score, away_score = predicted_away_score)
}
# Example inputs
home_team <- "Brazil"
away_team <- "Argentina"
tournament <- "FIFA World Cup"
recent_avg_home_score <- 1.8  # Example recent average goals for home team
recent_avg_away_score <- 1.5  # Example recent average goals for away team
neutral <- FALSE              # Whether the match is at a neutral venue
# Get predictions
predictions <- predict_match_score(home_team, away_team, tournament, recent_avg_home_score, recent_avg_away_score, neutral)
# Print predicted scores
cat("Predicted Score:\n")
cat(home_team, predictions$home_score, "-", predictions$away_score, away_team, "\n")
# Save models to .rds files
saveRDS(home_model, file = "home_model.rds")
saveRDS(away_model, file = "away_model.rds")
# Function to predict match score for a given home and away team
predict_match_score <- function(home_team, away_team, tournament, recent_avg_home_score, recent_avg_away_score, neutral = FALSE) {
# Align factor levels of 'tournament' to match training data in the models
tournament <- factor(tournament, levels = levels(home_model$data$tournament))
# Create a data frame for the input match with necessary features
match_data <- data.frame(
home_team = home_team,
away_team = away_team,
tournament = tournament,
home_advantage = ifelse(neutral == FALSE, 1, 0),
recent_avg_home_score = recent_avg_home_score,
recent_avg_away_score = recent_avg_away_score
)
# Predict scores using the loaded models
predicted_home_score <- predict(home_model, newdata = match_data, type = "response")
predicted_away_score <- predict(away_model, newdata = match_data, type = "response")
# Return the predictions
list(home_score = predicted_home_score, away_score = predicted_away_score)
}
# Example inputs
home_team <- "Brazil"
away_team <- "Chile"
tournament <- "FIFA World Cup"
recent_avg_home_score <- 1.8  # Example recent average goals for home team
recent_avg_away_score <- 1.5  # Example recent average goals for away team
neutral <- FALSE              # Whether the match is at a neutral venue
# Get predictions
predictions <- predict_match_score(home_team, away_team, tournament, recent_avg_home_score, recent_avg_away_score, neutral)
# Print predicted scores
cat("Predicted Score:\n")
cat(home_team, predictions$home_score, "-", predictions$away_score, away_team, "\n")
setwd("~/Documents/R/Score Prediction")
install.packages("readr")
install.packages("readr")
install.packages("readr")
install.packages("data.table")
install.packages("tidyr")
install.packages("dplyr")
install.packages("ggplot2")
install.packages("ggthemes")
install.packages("corrplot")
install.packages("lubridate")
install.packages("purrr")
install.packages("cowplot")
install.packages("graphics")
install.packages("IRdisplay")
install.packages("viridis")
install.packages("plotly")
# Load necessary libraries
library(readr)
library(data.table)
library(tidyr)
library(dplyr)
library(ggplot2)
library(ggthemes)
library(corrplot)
library(lubridate)
library(purrr)
library(cowplot)
library(viridis)
# Read in data files
matches <- read.csv("WorldCupMatches.csv")
players <- read.csv("WorldCupPlayers.csv")
cups <- read.csv("WorldCups.csv")
# Check data structure
str(matches)
# Top 10 matches by attendance
top_attendance <- matches %>%
arrange(desc(Attendance)) %>%
select(Home.Team.Name, Away.Team.Name, Attendance) %>%
head(n = 10)
# Average attendance by year
avg_attendance <- matches %>%
filter(!is.na(Year), !is.na(Attendance)) %>%
group_by(Year) %>%
summarise(avy_att = mean(Attendance)) %>%
as.data.frame()
# Plot average attendance over the years
ggplot(avg_attendance, aes(x = Year, y = avy_att)) +
geom_line(color = "blue") +
labs(title = "Average Attendance Over the Years",
x = "Year", y = "Average Attendance") +
theme_minimal()
# Total goals by year
total_goals <- matches %>%
mutate(total_goals = Away.Team.Goals + Home.Team.Goals) %>%
group_by(Year) %>%
summarise(sum = sum(total_goals)) %>%
as.data.frame()
# Plot total goals over the years
ggplot(total_goals, aes(x = Year, y = sum)) +
geom_line(color = "green") +
labs(title = "Total Goals Over the Years",
x = "Year", y = "Total Goals") +
theme_minimal()
# Home team win/draw/loss summary
matches1 <- na.omit(matches) %>%
mutate(home_team_win = ifelse(Home.Team.Goals > Away.Team.Goals, "WIN",
ifelse(Home.Team.Goals < Away.Team.Goals, "LOSS", "DRAW")))
matches1_home <- matches1 %>%
group_by(home_team_win) %>%
summarise(sum = n()) %>%
as.data.frame()
# Plot home team outcomes (win/draw/loss)
ggplot(matches1_home, aes(x = home_team_win, y = sum, fill = home_team_win)) +
geom_bar(stat = "identity") +
labs(title = "Home Team Outcomes (Win/Draw/Loss)",
x = "Outcome", y = "Count") +
theme_minimal() +
theme(legend.position = "none") +
scale_fill_manual(values = c("WIN" = "green", "DRAW" = "orange", "LOSS" = "red"))
# Distribution of home team goals
matches_home_goals <- matches1 %>%
group_by(Home.Team.Goals) %>%
summarise(sum = n()) %>%
as.data.frame()
# Plot distribution of home team goals
ggplot(matches_home_goals, aes(x = Home.Team.Goals, y = sum)) +
geom_bar(stat = "identity", fill = "skyblue") +
labs(title = "Distribution of Home Team Goals",
x = "Home Team Goals", y = "Frequency") +
theme_minimal()
# Distribution of away team goals
matches_away_goals <- matches1 %>%
group_by(Away.Team.Goals) %>%
summarise(sum = n()) %>%
as.data.frame()
# Plot distribution of away team goals
ggplot(matches_away_goals, aes(x = Away.Team.Goals, y = sum)) +
geom_bar(stat = "identity", fill = "purple") +
labs(title = "Distribution of Away Team Goals",
x = "Away Team Goals", y = "Frequency") +
theme_minimal()
# Top 20 home teams by wins
home_matches <- matches1 %>%
group_by(Home.Team.Name, home_team_win) %>%
summarise(sum = n()) %>%
as.data.frame()
top_teams <- home_matches %>%
filter(home_team_win == "WIN") %>%
arrange(desc(sum)) %>%
head(n = 20)
# Plot top 20 home teams by wins
ggplot(top_teams, aes(x = reorder(Home.Team.Name, -sum), y = sum, fill = Home.Team.Name)) +
geom_bar(stat = "identity") +
labs(title = "Top 20 Home Teams by Wins",
x = "Team", y = "Number of Wins") +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
# Coaches in finals
final <- matches %>%
filter(Stage == "Final") %>%
inner_join(players %>% select(MatchID, Coach.Name) %>% unique(), by = "MatchID")
final_coach <- final %>%
group_by(Coach.Name) %>%
summarise(n = n()) %>%
as.data.frame()
# Plot coaches in finals
ggplot(final_coach, aes(x = reorder(Coach.Name, -n), y = n, fill = Coach.Name)) +
geom_bar(stat = "identity") +
labs(title = "Coaches Appearing in Finals",
x = "Coach", y = "Number of Appearances") +
coord_flip() +
theme_minimal() +
theme(legend.position = "none")
# Half-time goals by year (home vs. away)
halftime <- matches %>%
group_by(Year) %>%
summarise(home = sum(Half.time.Home.Goals, na.rm = TRUE),
away = sum(Half.time.Away.Goals, na.rm = TRUE)) %>%
na.omit()
halftime_long <- halftime %>%
pivot_longer(cols = c(home, away), names_to = "type", values_to = "value")
# Plot half-time goals by year (home vs. away)
ggplot(halftime_long, aes(x = Year, y = value, fill = type)) +
geom_bar(stat = "identity", position = "dodge") +
facet_wrap(~ type, scales = "free_y") +
labs(title = "Half-Time Goals by Year (Home vs. Away)",
x = "Year", y = "Goals") +
theme_minimal() +
scale_fill_viridis_d()
# Plot average attendance over the years
ggplot(avg_attendance, aes(x = Year, y = avy_att)) +
geom_line(color = "blue") +
labs(title = "Average Attendance Over the Years",
x = "Year", y = "Average Attendance") +
theme_minimal()
